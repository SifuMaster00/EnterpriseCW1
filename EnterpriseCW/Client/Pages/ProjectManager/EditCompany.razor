@page "/companies/edit/{Id:guid}"
@inject NavigationManager Navigation
@inject HttpClient Http

<h3>Edit Company</h3>


<EditForm Model="Company" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label class="control-label">Name</label>
        <InputText @bind-Value="Company.Name"></InputText>
        <ValidationMessage For="@(()=>Company.Name)" />
    </div>
    <div class="form-group">
        <label class="control-label">Description</label>
        <InputText @bind-Value="Company.Description"></InputText>
        <ValidationMessage For="@(()=>Company.Description)" />


    </div>
    <button type="submit" class="btn btn-primary">Submit</button>

</EditForm>

@code {
    [Parameter]
    public Guid Id { get; set; }
    private Company Company { get; set; } = new Company();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //await Http.DeleteAsync($"/api/Todos/{Id}");
            Company = await Http.GetFromJsonAsync<Company>($"/api/companies/{Id}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {

        }
    }


    private async void HandleValidSubmit()
    {
        try
        {

            var respone = await Http.PutAsJsonAsync($"/api/companies/{Company.Id}", Company);
            respone.EnsureSuccessStatusCode();

            //var content = await respone.Content.ReadAsStringAsync();
            //var todo = JsonConvert.DeserializeObject<Todo>(content);

            Navigation.NavigateTo($"/Companyy");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception)
        {

            throw;
        }


    }

}

